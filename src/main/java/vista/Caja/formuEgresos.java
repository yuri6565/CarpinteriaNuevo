/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package vista.Caja;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import modelo.Conexion;
import vista.TemaManager;

/**
 *
 * @author ADSO
 */
public class formuEgresos extends javax.swing.JDialog {
    /**
     * Creates new form formuEgresos
     */
    
    private Egresos ingresoPanel;
    
    public formuEgresos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
         mostrarProv();
        cargarProveedores(); // Cargar proveedores en cmbStock1
        cargarProductos();  // Cargar productos en cmbStock2
  
    setPreferredSize(new java.awt.Dimension(522, 460));
    }
    
private void mostrarProv() {
    jLabel8.setVisible(false);
    comboProveedor.setVisible(false);
    btnClienteN1.setVisible(false);
    jLabel4.setVisible(false);
    comboProductos.setVisible(false);
    btnClienteN.setVisible(false);
    
    jPanel1.revalidate();
    jPanel1.repaint();
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnGuardar = new rojeru_san.RSButtonRiple();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnCancelar = new rojeru_san.RSButtonRiple();
        txtPago = new com.toedter.calendar.JDateChooser();
        txtCantidadnuevo = new RSMaterialComponent.RSTextFieldMaterial();
        jLabel2 = new javax.swing.JLabel();
        txtDetallenuevo = new RSMaterialComponent.RSTextFieldMaterial();
        cmbCategoria = new RSMaterialComponent.RSComboBoxMaterial();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboProveedor = new RSMaterialComponent.RSComboBoxMaterial();
        btnClienteN1 = new RSMaterialComponent.RSButtonShape();
        jLabel4 = new javax.swing.JLabel();
        comboProductos = new RSMaterialComponent.RSComboBoxMaterial();
        btnClienteN = new RSMaterialComponent.RSButtonShape();
        jLabel5 = new javax.swing.JLabel();
        txtCantidadnuevo1 = new RSMaterialComponent.RSTextFieldMaterial();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(46, 49, 82));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Century751 BT", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Produccion");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 520, 50));

        btnGuardar.setBackground(new java.awt.Color(46, 49, 82));
        btnGuardar.setText("Guardar");
        btnGuardar.setFont(new java.awt.Font("Humnst777 BlkCn BT", 1, 14)); // NOI18N
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 330, 140, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel9.setText("Detalle de Egreso:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 130, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel10.setText("Fecha Pago:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        btnCancelar.setBackground(new java.awt.Color(46, 49, 82));
        btnCancelar.setText("Volver");
        btnCancelar.setFont(new java.awt.Font("Humnst777 BlkCn BT", 1, 14)); // NOI18N
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, 140, -1));

        txtPago.setBackground(new java.awt.Color(255, 255, 255));
        txtPago.setForeground(new java.awt.Color(255, 255, 255));
        txtPago.setDateFormatString("y-MM-d");
        txtPago.setMaxSelectableDate(new java.util.Date(253370786472000L));
        jPanel1.add(txtPago, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 190, 30));

        txtCantidadnuevo.setPlaceholder("Ingrese cantidad de egreso");
        txtCantidadnuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantidadnuevoActionPerformed(evt);
            }
        });
        jPanel1.add(txtCantidadnuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 90, 220, 30));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel2.setText("Cantidad del Egreso:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 70, -1, -1));

        txtDetallenuevo.setPlaceholder("Ingrese detalles de egreso");
        txtDetallenuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDetallenuevoActionPerformed(evt);
            }
        });
        jPanel1.add(txtDetallenuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 190, 30));

        cmbCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione categoria:", "Servicios Publicos", "Compra de Productos e Insumos", "Arriendo", "NÃ³mina", "Gastos Administrativos", "Mercadeo y Publicidad", "Transporte, Domicilios y Logistica", "mantenimineto y Reparaciones ", "Muebles, Equipos o Maquinaria", "Otros" }));
        cmbCategoria.setColorMaterial(new java.awt.Color(0, 0, 0));
        cmbCategoria.setFont(new java.awt.Font("Roboto Bold", 0, 14)); // NOI18N
        cmbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoriaActionPerformed(evt);
            }
        });
        jPanel1.add(cmbCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 170, 210, 30));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setText("Categoria");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 140, -1, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel8.setText("Proveedor");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, -1));

        comboProveedor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione un Proveedor:", "Item 1", "Item 2", "Item 3" }));
        comboProveedor.setColorMaterial(new java.awt.Color(0, 0, 0));
        comboProveedor.setFont(new java.awt.Font("Roboto Bold", 0, 14)); // NOI18N
        jPanel1.add(comboProveedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 190, 30));

        btnClienteN1.setBackground(new java.awt.Color(46, 49, 82));
        btnClienteN1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        btnClienteN1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plus (2).png"))); // NOI18N
        btnClienteN1.setBackgroundHover(new java.awt.Color(67, 150, 209));
        btnClienteN1.setFont(new java.awt.Font("Roboto Bold", 1, 15)); // NOI18N
        btnClienteN1.setForma(RSMaterialComponent.RSButtonShape.FORMA.ROUND);
        btnClienteN1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(btnClienteN1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 210, 20, 20));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel4.setText("Producto");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 210, -1, -1));

        comboProductos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Producto:", "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboProductos.setColorMaterial(new java.awt.Color(0, 0, 0));
        comboProductos.setFont(new java.awt.Font("Roboto Bold", 0, 14)); // NOI18N
        jPanel1.add(comboProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 240, 210, 30));

        btnClienteN.setBackground(new java.awt.Color(46, 49, 82));
        btnClienteN.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        btnClienteN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plus (2).png"))); // NOI18N
        btnClienteN.setBackgroundHover(new java.awt.Color(67, 150, 209));
        btnClienteN.setFont(new java.awt.Font("Roboto Bold", 1, 15)); // NOI18N
        btnClienteN.setForma(RSMaterialComponent.RSButtonShape.FORMA.ROUND);
        btnClienteN.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(btnClienteN, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 210, 20, 20));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel5.setText("Cantidad:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 170, 30));

        txtCantidadnuevo1.setForeground(new java.awt.Color(0, 0, 0));
        txtCantidadnuevo1.setPlaceholder("Ingrese cantidad");
        txtCantidadnuevo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCantidadnuevo1ActionPerformed(evt);
            }
        });
        jPanel1.add(txtCantidadnuevo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 280, 220, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
try {
            // Validar campos
            if (txtPago.getDate() == null) {
                mostrarError("Seleccione una fecha de pago");
                return;
            }
            if (txtDetallenuevo.getText().trim().isEmpty()) {
                mostrarError("Ingrese una descripciÃ³n");
                return;
            }
            if (txtCantidadnuevo.getText().trim().isEmpty()) {
                mostrarError("Ingrese el monto del egreso");
                return;
            }
            if (cmbCategoria.getSelectedIndex() == 0) {
                mostrarError("Seleccione una categorÃ­a");
                return;
            }
            if (comboProveedor.getSelectedIndex() == 0) {
                mostrarError("Seleccione un proveedor");
                return;
            }
            if (comboProductos.getSelectedIndex() == 0) {
                mostrarError("Seleccione un producto");
                return;
            }/*
            if (txtCantidadnuevo1.getText().trim().isEmpty()) {
                mostrarError("Ingrese la cantidad del producto");
                return;
            }*/

            // Obtener valores
            java.sql.Date fecha = new java.sql.Date(txtPago.getDate().getTime());
            String descripcion = txtDetallenuevo.getText().trim();
            Double monto = Double.parseDouble(txtCantidadnuevo.getText().trim());
            String categoria = (String) cmbCategoria.getSelectedItem();
            String nombreProveedor = (String) comboProveedor.getSelectedItem();
            String nombreProducto = (String) comboProductos.getSelectedItem();
            int cantidad = Integer.parseInt(txtCantidadnuevo1.getText().trim());

            // Validar cantidad positiva 
            if (cantidad <= 0) {
                mostrarError("La cantidad debe ser mayor que cero");
                return;
            }

            // IDs
            String idProveedor = obtenerIdProveedor(nombreProveedor);
            int idProducto = obtenerIdProducto(nombreProducto);
            if (idProveedor == null) {
                mostrarError("No se encontrÃ³ el proveedor en la base de datos");
                return;
            }
            if (idProducto == -1) {
                mostrarError("No se encontrÃ³ el producto en la base de datos");
                return;
            }

            // paso de datos
            try (Connection con = Conexion.getConnection()) {
                con.setAutoCommit(false); // Desactivar autocommit para transacciÃ³n

                // Insertar egreso en tabla caja
                if (!insertarEtapa(fecha, descripcion, monto, categoria)) {
                    con.rollback();
                    return;
                }

                // Actualizar stock en inventario
                if (!actualizarStock(idProducto, cantidad)) {
                    con.rollback();
                    mostrarError("Error al actualizar el stock");
                    return;
                }

                // Insertar relaciÃ³n en suministra
                if (!insertarSuministra(idProveedor, idProducto)) {
                    con.rollback();
                    mostrarError("Error al registrar la relaciÃ³n proveedor-producto");
                    return;
                }

                // Confirmar transacciÃ³n
                con.commit();
                mostrarMensaje("Registro guardado, stock actualizado y relaciÃ³n proveedor-producto registrada correctamente");
                this.dispose();

                if (ingresoPanel != null) {
                    // AquÃ­ puedes actualizar la tabla de ingresoPanel si es necesario
                }
            } catch (SQLException e) {
                mostrarError("Error al guardar: " + e.getMessage());
                e.printStackTrace();
            }
        } catch (NumberFormatException e) {
            mostrarError("Monto o cantidad invÃ¡lidos: " + e.getMessage());
        } catch (Exception e) {
            mostrarError("Error inesperado: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void cmbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoriaActionPerformed
        String seleccion = cmbCategoria.getSelectedItem().toString();

        if (seleccion.equals("Compra de Productos e Insumos")) {
            jLabel8.setVisible(true);
            comboProveedor.setVisible(true);
            btnClienteN1.setVisible(true);
            jLabel4.setVisible(true);
            comboProductos.setVisible(true);
            btnClienteN.setVisible(true);
        } else {
            jLabel8.setVisible(false);
            comboProveedor.setVisible(false);
            btnClienteN1.setVisible(false);
            jLabel4.setVisible(false);
            comboProductos.setVisible(false);
            btnClienteN.setVisible(false);
        }
        jPanel1.revalidate();
        jPanel1.repaint(); // Forzar actualizaciÃ³n de la interfaz
    
    }//GEN-LAST:event_cmbCategoriaActionPerformed

    private void txtCantidadnuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantidadnuevoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadnuevoActionPerformed

    private void txtDetallenuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDetallenuevoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDetallenuevoActionPerformed

    private void txtCantidadnuevo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCantidadnuevo1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCantidadnuevo1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formuEgresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formuEgresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formuEgresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formuEgresos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                formuEgresos dialog = new formuEgresos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
               
    private void cargarProveedores() {
        try (Connection con = Conexion.getConnection();
             PreparedStatement ps = con.prepareStatement("SELECT nombre FROM proveedor");
             ResultSet rs = ps.executeQuery()) {

            // Limpiar ComboBox
            comboProveedor.removeAllItems();
            comboProveedor.addItem("Seleccione un Proveedor:");

            // Agregar proveedores
            while (rs.next()) {
                comboProveedor.addItem(rs.getString("nombre"));
            }
        } catch (SQLException e) {
            mostrarError("Error al cargar proveedores: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    
    private void cargarProductos() {
        try (Connection con = Conexion.getConnection();
             PreparedStatement ps = con.prepareStatement("SELECT nombre FROM inventario WHERE tipo = 'material'");
             ResultSet rs = ps.executeQuery()) {

            // Limpiar ComboBox
            cmbCategoria.removeAllItems();
            cmbCategoria.addItem("Seleccione Producto:");

            // Agregar productos
            while (rs.next()) {
                cmbCategoria.addItem(rs.getString("nombre"));
            }
        } catch (SQLException e) {
            mostrarError("Error al cargar productos: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    
    private String obtenerIdProveedor(String nombreProveedor) {
        String sql = "SELECT id_proveedor FROM proveedor WHERE nombre = ?";
        try (Connection con = Conexion.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, nombreProveedor);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getString("id_proveedor");
                }
            }
        } catch (SQLException e) {
            mostrarError("Error al obtener ID del proveedor: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }
    
    
    private int obtenerIdProducto(String nombreProducto) {
        String sql = "SELECT id_inventario FROM inventario WHERE nombre = ? AND tipo = 'material'";
        try (Connection con = Conexion.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setString(1, nombreProducto);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("id_inventario");
                }
            }
        } catch (SQLException e) {
            mostrarError("Error al obtener ID del producto: " + e.getMessage());
            e.printStackTrace();
        }
        return -1;
    }
    
    
    private boolean actualizarStock(int idProducto, int cantidad) {
        String sql = "UPDATE inventario SET cantidad = cantidad + ? WHERE id_inventario = ?";
        try (Connection con = Conexion.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, cantidad);
            ps.setInt(2, idProducto);
            int resultado = ps.executeUpdate();
            return resultado > 0;
        } catch (SQLException e) {
            mostrarError("Error al actualizar stock: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    
    private boolean insertarSuministra(String idProveedor, int idProducto) {
        String sql = "INSERT INTO suministra (inventario_id_inventario, proveedor_id_proveedor) VALUES (?, ?)";
        try (Connection con = Conexion.getConnection();
             PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, idProducto);
            ps.setString(2, idProveedor); // id_proveedor es varchar
            int resultado = ps.executeUpdate();
            return resultado > 0;
        } catch (SQLException e) {
            mostrarError("Error al registrar suministra: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }            

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private rojeru_san.RSButtonRiple btnCancelar;
    private RSMaterialComponent.RSButtonShape btnClienteN;
    private RSMaterialComponent.RSButtonShape btnClienteN1;
    private rojeru_san.RSButtonRiple btnGuardar;
    private RSMaterialComponent.RSComboBoxMaterial cmbCategoria;
    private RSMaterialComponent.RSComboBoxMaterial comboProductos;
    private RSMaterialComponent.RSComboBoxMaterial comboProveedor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private RSMaterialComponent.RSTextFieldMaterial txtCantidadnuevo;
    private RSMaterialComponent.RSTextFieldMaterial txtCantidadnuevo1;
    private RSMaterialComponent.RSTextFieldMaterial txtDetallenuevo;
    private com.toedter.calendar.JDateChooser txtPago;
    // End of variables declaration//GEN-END:variables

   private boolean insertarEtapa(Date fecha, String descripcion, Double monto, String categoria) throws SQLException {
        String sql = "INSERT INTO caja (fecha, descripcion, monto, movimiento) VALUES (?, ?,?,'egreso')";

         try (Connection con = Conexion.getConnection();
         PreparedStatement ps = con.prepareStatement(sql)) {

        // Convertir java.util.Date a java.sql.Date
        ps.setDate(1, new java.sql.Date(fecha.getTime()));
        ps.setString(2, descripcion);
        
        // Usar setDouble para valores numÃ©ricos
        ps.setDouble(3, monto);
        
        
        int resultado = ps.executeUpdate();
        if (resultado > 0) {
            mostrarMensaje("Registro guardado correctamente");
            return true;
        }
    } catch (SQLException e) {
        mostrarError("Error de base de datos: " + e.getMessage());
        throw e;  // Relanzar la excepciÃ³n para manejo superior
    }
    return false;
}

    private void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    private void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Ãxito", JOptionPane.INFORMATION_MESSAGE);

    }     
}
