/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package vista.Produccion;

import java.awt.Frame;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import modelo.Conexion;

/**
 *
 * @author pc
 */
public class EditEtapaProduccion extends javax.swing.JDialog {

    private int idProduccionActual;
    private int idEtapa;
    private boolean datosModificados;

    /**
     * Creates new form EtapaProduccion
     *
     * @param parent
     * @param modal
     * @param idEtapa
     * @param produccionPanel
     */
    public EditEtapaProduccion(Frame parent, boolean modal, int idEtapa) {
        super(parent, modal);
        this.idEtapa = idEtapa;

        // Configurar undecorated antes de initComponents
        setUndecorated(true);
        initComponents(); // Llamada única a initComponents

        setLocationRelativeTo(parent); // Configurar ubicación después de initComponents

        // Configuración inicial
        cargarDatosEtapa(idEtapa);

        // Configurar el formato numérico para toda la aplicación
        Locale.setDefault(new Locale("es", "ES"));
        DecimalFormatSymbols symbols = new DecimalFormatSymbols();
        symbols.setDecimalSeparator(',');
        symbols.setGroupingSeparator('.');

// Configuración correcta del formateador
        DecimalFormat formatoDecimal = new DecimalFormat("#,##0.00", symbols);

// Configurar NumberFormat si es necesario
        NumberFormat numberFormat = NumberFormat.getInstance();
        if (numberFormat instanceof DecimalFormat) {
            ((DecimalFormat) numberFormat).setDecimalFormatSymbols(symbols);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtetapa = new RSMaterialComponent.RSTextFieldMaterial();
        Boxestado = new RSMaterialComponent.RSComboBoxMaterial();
        txtFechainicio = new com.toedter.calendar.JDateChooser();
        txtfechafin = new com.toedter.calendar.JDateChooser();
        btnGuardar1 = new rojeru_san.RSButtonRiple();
        jLabel12 = new javax.swing.JLabel();
        btnCancelar2 = new rojeru_san.RSButtonRiple();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(46, 49, 82));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Century751 BT", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Etapa Produccion");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 50));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel6.setText("Estado:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel9.setText("Fecha final:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel10.setText("Nombre etapa:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        txtetapa.setForeground(new java.awt.Color(0, 0, 0));
        txtetapa.setColorMaterial(new java.awt.Color(0, 0, 0));
        txtetapa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtetapa.setPhColor(new java.awt.Color(0, 0, 0));
        txtetapa.setPlaceholder("");
        txtetapa.setSelectionColor(new java.awt.Color(0, 0, 0));
        txtetapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtetapaActionPerformed(evt);
            }
        });
        jPanel1.add(txtetapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 250, 30));

        Boxestado.setForeground(new java.awt.Color(102, 102, 102));
        Boxestado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar", "pendiente", "proceso", "completado" }));
        Boxestado.setFont(new java.awt.Font("Roboto Bold", 0, 14)); // NOI18N
        Boxestado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxestadoActionPerformed(evt);
            }
        });
        jPanel1.add(Boxestado, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 260, 30));

        txtFechainicio.setBackground(new java.awt.Color(255, 255, 255));
        txtFechainicio.setForeground(new java.awt.Color(255, 255, 255));
        txtFechainicio.setDateFormatString("y-MM-d");
        txtFechainicio.setMaxSelectableDate(new java.util.Date(253370786472000L));
        jPanel1.add(txtFechainicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 180, 260, 30));

        txtfechafin.setBackground(new java.awt.Color(255, 255, 255));
        txtfechafin.setForeground(new java.awt.Color(255, 255, 255));
        txtfechafin.setDateFormatString("y-MM-d");
        jPanel1.add(txtfechafin, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 250, 30));

        btnGuardar1.setBackground(new java.awt.Color(46, 49, 82));
        btnGuardar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plus (2).png"))); // NOI18N
        btnGuardar1.setText("Guardar");
        btnGuardar1.setFont(new java.awt.Font("Humnst777 BlkCn BT", 1, 18)); // NOI18N
        btnGuardar1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnGuardar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardar1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 230, 140, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel12.setText("Fecha inicio:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, -1, -1));

        btnCancelar2.setBackground(new java.awt.Color(46, 49, 82));
        btnCancelar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salida (1).png"))); // NOI18N
        btnCancelar2.setText("Volver");
        btnCancelar2.setFont(new java.awt.Font("Humnst777 BlkCn BT", 1, 18)); // NOI18N
        btnCancelar2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnCancelar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelar2ActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 230, 140, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BoxestadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxestadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BoxestadoActionPerformed

    /**
     * Convierte un String numérico al formato decimal correcto para MySQL
     *
     * @param valor String con el número (puede usar coma o punto decimal)
     * @return double listo para ser usado en MySQL
     */
    private double convertirFormatoMySQL(String valor) {
        if (valor == null || valor.trim().isEmpty()) {
            return 0.0;
        }

        // Normalizamos el formato reemplazando comas por puntos
        String normalizado = valor.replace(',', '.');

        // Eliminamos cualquier caracter que no sea dígito o punto
        normalizado = normalizado.replaceAll("[^\\d.]", "");

        try {
            return Double.parseDouble(normalizado);
        } catch (NumberFormatException e) {
            System.err.println("Error al convertir valor: " + valor + " - Usando 0.0 como valor por defecto");
            return 0.0;
        }
    }

    private void btnGuardar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardar1ActionPerformed
        // Validación de campos
        if (txtetapa.getText().trim().isEmpty() || txtFechainicio.getDate() == null || Boxestado.getSelectedIndex() <= 0) {
            new espacio_alerta((Frame) this.getParent(), true, "Error", "Todos los campos son obligatorios").setVisible(true);
            return;
        }

        // Diálogo de confirmación
        alertaa confirmDialog = new alertaa((Frame) this.getParent(), true, "Confirmar", "¿Desea guardar los datos?");
        confirmDialog.setVisible(true);
        if (!confirmDialog.opcionConfirmada) {
            return;
        }

        Connection con = null;
        try {
            // Obtener valores del formulario
            String nombreEtapa = txtetapa.getText().trim();
            Date fechaInicio = new Date(txtFechainicio.getDate().getTime());
            Date fechaFin = txtfechafin.getDate() != null ? new Date(txtfechafin.getDate().getTime()) : null;
            String estado = Boxestado.getSelectedItem().toString();

            // Validar fechas
            if (fechaFin != null && fechaFin.before(fechaInicio)) {
                new Error_fecha((Frame) this.getParent(), true, "Error", "La fecha final no puede ser anterior a la inicial").setVisible(true);
                return;
            }

            con = Conexion.getConnection();
            con.setAutoCommit(false);

            // Guardar/actualizar la etapa
            if (idEtapa == 0) {
                // Insertar nueva etapa
                String sql = "INSERT INTO etapa_produccion (nombre_etapa, fecha_inicio, fecha_fin, estado, produccion_id_produccion) VALUES (?, ?, ?, ?, ?)";
                try (PreparedStatement ps = con.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS)) {
                    ps.setString(1, nombreEtapa);
                    ps.setDate(2, fechaInicio);
                    ps.setDate(3, fechaFin);
                    ps.setString(4, estado);
                    ps.setInt(5, idProduccionActual);
                    ps.executeUpdate();

                    try (ResultSet rs = ps.getGeneratedKeys()) {
                        if (rs.next()) {
                            idEtapa = rs.getInt(1);
                        }
                    }
                }
            } else {
                // Actualizar etapa existente
                String sql = "UPDATE etapa_produccion SET nombre_etapa = ?, fecha_inicio = ?, fecha_fin = ?, estado = ? WHERE idetapa_produccion = ?";
                try (PreparedStatement ps = con.prepareStatement(sql)) {
                    ps.setString(1, nombreEtapa);
                    ps.setDate(2, fechaInicio);
                    ps.setDate(3, fechaFin);
                    ps.setString(4, estado);
                    ps.setInt(5, idEtapa);
                    ps.executeUpdate();
                }
            }

            // Lógica para actualizar estados de producción y pedido
            if ("proceso".equals(estado)) {
                // Actualizar producción a "proceso" si no está finalizada
                String sqlUpdateProduccion = "UPDATE produccion SET estado = 'proceso' WHERE id_produccion = ? AND estado != 'finalizado'";
                try (PreparedStatement ps = con.prepareStatement(sqlUpdateProduccion)) {
                    ps.setInt(1, idProduccionActual);
                    ps.executeUpdate();
                }

                // Actualizar pedido a "proceso" si no está finalizado
                String sqlUpdatePedido = "UPDATE pedido p JOIN produccion pr ON p.id_pedido = pr.detalle_pedido_iddetalle_pedido "
                        + "SET p.estado = 'proceso' WHERE pr.id_produccion = ? AND p.estado != 'finalizado'";
                try (PreparedStatement ps = con.prepareStatement(sqlUpdatePedido)) {
                    ps.setInt(1, idProduccionActual);
                    ps.executeUpdate();
                }
            } else if ("completado".equals(estado)) {
                // Verificar si todas las etapas están completadas
                String sqlVerificarEtapas = "SELECT COUNT(*) AS incompletas FROM etapa_produccion "
                        + "WHERE produccion_id_produccion = ? AND estado != 'completado'";

                try (PreparedStatement ps = con.prepareStatement(sqlVerificarEtapas)) {
                    ps.setInt(1, idProduccionActual);
                    ResultSet rs = ps.executeQuery();
                    if (rs.next() && rs.getInt("incompletas") == 0) {
                        // Todas las etapas completadas - marcar producción como finalizada
                        String sqlUpdateProduccion = "UPDATE produccion SET estado = 'finalizado', fecha_fin = CURDATE() "
                                + "WHERE id_produccion = ?";
                        try (PreparedStatement psProd = con.prepareStatement(sqlUpdateProduccion)) {
                            psProd.setInt(1, idProduccionActual);
                            psProd.executeUpdate();
                        }

                        // Verificar si todas las producciones del pedido están finalizadas
                        String sqlVerificarProducciones = "SELECT COUNT(*) AS incompletas FROM produccion "
                                + "WHERE detalle_pedido_iddetalle_pedido = "
                                + "(SELECT detalle_pedido_iddetalle_pedido FROM produccion WHERE id_produccion = ?) "
                                + "AND estado != 'finalizado'";

                        try (PreparedStatement psPed = con.prepareStatement(sqlVerificarProducciones)) {
                            psPed.setInt(1, idProduccionActual);
                            ResultSet rsPed = psPed.executeQuery();
                            if (rsPed.next() && rsPed.getInt("incompletas") == 0) {
                                // Todas las producciones finalizadas - marcar pedido como finalizado
                                String sqlUpdatePedido = "UPDATE pedido SET estado = 'finalizado', fecha_fin = CURDATE() "
                                        + "WHERE id_pedido = "
                                        + "(SELECT p.id_pedido FROM pedido p "
                                        + "JOIN produccion pr ON p.id_pedido = pr.detalle_pedido_iddetalle_pedido "
                                        + "WHERE pr.id_produccion = ?)";
                                try (PreparedStatement psUpdatePed = con.prepareStatement(sqlUpdatePedido)) {
                                    psUpdatePed.setInt(1, idProduccionActual);
                                    psUpdatePed.executeUpdate();
                                }
                            }
                        }
                    }
                }
            }

            con.commit();
            this.datosModificados = true;
            this.dispose();

            // Mostrar mensaje de éxito
            JOptionPane.showMessageDialog(this, "Datos guardados correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            try {
                if (con != null) {
                    con.rollback();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            new Error_guardar((Frame) this.getParent(), true, "Error", "Error al guardar: " + e.getMessage()).setVisible(true);
            e.printStackTrace();
        } finally {
            try {
                if (con != null) {
                    con.setAutoCommit(true);
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_btnGuardar1ActionPerformed

    private String validarFormatoDecimal(String valor) {
        // Asegurar que el valor tenga el formato correcto para visualización
        if (!valor.matches("^\\d+([.,]\\d{1,2})?$")) {
            System.err.println("Formato numérico inválido detectado: " + valor);
            return "0,00"; // Valor por defecto
        }
        return valor.replace(".", ","); // Normalizar a comas para visualización
    }

    public boolean actualizarMaterialesEtapa(int idEtapa, Map<Integer, Double> nuevosMateriales) {
        try (Connection con = Conexion.getConnection()) {
            // 1. Obtener materiales actuales
            String sqlSelect = "SELECT inventario_id_inventario, cantidad_usada FROM utilizado "
                    + "WHERE etapa_produccion_idetapa_produccion = ?";

            // 2. Actualizar inventario (diferencia)
            String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? "
                    + "WHERE id_inventario = ?";

            // 3. Actualizar/insertar en utilizado
            String sqlUpsert = "INSERT INTO utilizado (etapa_produccion_idetapa_produccion, "
                    + "inventario_id_inventario, cantidad_usada) VALUES (?, ?, ?) "
                    + "ON DUPLICATE KEY UPDATE cantidad_usada = ?";

            try {
                con.setAutoCommit(false);
                Map<Integer, Double> materialesActuales = new HashMap<>();

                // Paso 1: Obtener materiales actuales
                try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
                    psSelect.setInt(1, idEtapa);
                    ResultSet rs = psSelect.executeQuery();

                    while (rs.next()) {
                        materialesActuales.put(
                                rs.getInt("inventario_id_inventario"),
                                rs.getDouble("cantidad_usada")
                        );
                    }
                }

                // Paso 2: Calcular diferencias y actualizar inventario
                try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                    // Para materiales eliminados o con cantidad reducida
                    for (Map.Entry<Integer, Double> entry : materialesActuales.entrySet()) {
                        int idInventario = entry.getKey();
                        double cantidadActual = entry.getValue();
                        Double cantidadNueva = nuevosMateriales.get(idInventario);

                        if (cantidadNueva == null) {
                            // Material eliminado - devolver todo al inventario
                            psUpdate.setDouble(1, cantidadActual);
                            psUpdate.setInt(2, idInventario);
                            psUpdate.executeUpdate();
                        } else if (cantidadNueva < cantidadActual) {
                            // Cantidad reducida - devolver diferencia
                            double diferencia = cantidadActual - cantidadNueva;
                            psUpdate.setDouble(1, diferencia);
                            psUpdate.setInt(2, idInventario);
                            psUpdate.executeUpdate();
                        }
                    }

                    // Para materiales nuevos o con cantidad aumentada
                    for (Map.Entry<Integer, Double> entry : nuevosMateriales.entrySet()) {
                        int idInventario = entry.getKey();
                        double cantidadNueva = entry.getValue();
                        Double cantidadActual = materialesActuales.get(idInventario);

                        if (cantidadActual == null) {
                            // Material nuevo - restar del inventario
                            psUpdate.setDouble(1, -cantidadNueva);
                            psUpdate.setInt(2, idInventario);
                            psUpdate.executeUpdate();
                        } else if (cantidadNueva > cantidadActual) {
                            // Cantidad aumentada - restar diferencia
                            double diferencia = cantidadNueva - cantidadActual;
                            psUpdate.setDouble(1, -diferencia);
                            psUpdate.setInt(2, idInventario);
                            psUpdate.executeUpdate();
                        }
                    }
                }

                // Paso 3: Actualizar tabla utilizado
                try (PreparedStatement psUpsert = con.prepareStatement(sqlUpsert)) {
                    for (Map.Entry<Integer, Double> entry : nuevosMateriales.entrySet()) {
                        psUpsert.setInt(1, idEtapa);
                        psUpsert.setInt(2, entry.getKey());
                        psUpsert.setDouble(3, entry.getValue());
                        psUpsert.setDouble(4, entry.getValue());
                        psUpsert.executeUpdate();
                    }

                    // Eliminar materiales que ya no están en la lista
                    String sqlDelete = "DELETE FROM utilizado WHERE "
                            + "etapa_produccion_idetapa_produccion = ? AND "
                            + "inventario_id_inventario = ?";

                    try (PreparedStatement psDelete = con.prepareStatement(sqlDelete)) {
                        for (Integer idInventario : materialesActuales.keySet()) {
                            if (!nuevosMateriales.containsKey(idInventario)) {
                                psDelete.setInt(1, idEtapa);
                                psDelete.setInt(2, idInventario);
                                psDelete.executeUpdate();
                            }
                        }
                    }
                }

                con.commit();
                return true;
            } catch (SQLException e) {
                con.rollback();
                throw e;
            } finally {
                con.setAutoCommit(true);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public boolean eliminarEtapaCompleta(int idEtapa) {
        try (Connection con = Conexion.getConnection()) {
            con.setAutoCommit(false); // Iniciar transacción

            // 1. Obtener todos los materiales/herramientas utilizados
            String sqlSelect = "SELECT i.nombre, u.cantidad_usada, i.tipo "
                    + "FROM utilizado u "
                    + "JOIN inventario i ON u.inventario_id_inventario = i.id_inventario "
                    + "WHERE u.etapa_produccion_idetapa_produccion = ?";

            // 2. Devolver cantidades al inventario
            String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? "
                    + "WHERE nombre = ?";

            // 3. Eliminar registros de utilizado
            String sqlDeleteUtilizado = "DELETE FROM utilizado WHERE etapa_produccion_idetapa_produccion = ?";

            // 4. Eliminar la etapa
            String sqlDeleteEtapa = "DELETE FROM etapa_produccion WHERE idetapa_produccion = ?";

            try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
                psSelect.setInt(1, idEtapa);
                ResultSet rs = psSelect.executeQuery();

                // Devolver materiales al inventario
                try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                    while (rs.next()) {
                        String nombre = rs.getString("nombre");
                        double cantidad = rs.getDouble("cantidad_usada");
                        String tipo = rs.getString("tipo");

                        psUpdate.setDouble(1, cantidad);
                        psUpdate.setString(2, nombre);
                        psUpdate.executeUpdate();
                    }
                }

                // Eliminar de utilizado
                try (PreparedStatement psDelete = con.prepareStatement(sqlDeleteUtilizado)) {
                    psDelete.setInt(1, idEtapa);
                    psDelete.executeUpdate();
                }

                // Eliminar etapa
                try (PreparedStatement psDeleteEtapa = con.prepareStatement(sqlDeleteEtapa)) {
                    psDeleteEtapa.setInt(1, idEtapa);
                    int affectedRows = psDeleteEtapa.executeUpdate();

                    if (affectedRows > 0) {
                        con.commit(); // Confirmar transacción
                        return true;
                    }
                }
            } catch (SQLException e) {
                con.rollback(); // Revertir en caso de error
                throw e;
            } finally {
                con.setAutoCommit(true);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    "Error al eliminar etapa: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        return false;
    }

    private void txtetapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtetapaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtetapaActionPerformed

    private void btnCancelar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelar2ActionPerformed
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelar2ActionPerformed
    private void manejarEliminaciones(Connection con, FormularioMH formMH, int idEtapa) throws SQLException {
        // 1. Para materiales a eliminar
        for (String material : formMH.getMaterialesAEliminar()) {
            // a. Obtener cantidad usada actual
            String sqlSelect = "SELECT cantidad_usada FROM utilizado "
                    + "WHERE etapa_produccion_idetapa_produccion = ? "
                    + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";

            try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
                psSelect.setInt(1, idEtapa);
                psSelect.setString(2, material);
                ResultSet rs = psSelect.executeQuery();

                if (rs.next()) {
                    double cantidad = rs.getDouble("cantidad_usada");

                    // b. Devolver al inventario
                    String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? "
                            + "WHERE nombre = ?";
                    try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                        psUpdate.setDouble(1, cantidad);
                        psUpdate.setString(2, material);
                        psUpdate.executeUpdate();
                    }

                    // c. Eliminar de la tabla utilizado
                    String sqlDelete = "DELETE FROM utilizado "
                            + "WHERE etapa_produccion_idetapa_produccion = ? "
                            + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
                    try (PreparedStatement psDelete = con.prepareStatement(sqlDelete)) {
                        psDelete.setInt(1, idEtapa);
                        psDelete.setString(2, material);
                        psDelete.executeUpdate();
                    }
                }
            }
        }

        // 2. Hacer lo mismo para herramientas
        for (String herramienta : formMH.getHerramientasAEliminar()) {
            // Misma lógica que para materiales
            // a. Obtener cantidad usada actual
            String sqlSelect = "SELECT cantidad_usada FROM utilizado "
                    + "WHERE etapa_produccion_idetapa_produccion = ? "
                    + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";

            try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
                psSelect.setInt(1, idEtapa);
                psSelect.setString(2, herramienta);
                ResultSet rs = psSelect.executeQuery();

                if (rs.next()) {
                    double cantidad = rs.getDouble("cantidad_usada");

                    // b. Devolver al inventario
                    String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? "
                            + "WHERE nombre = ?";
                    try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                        psUpdate.setDouble(1, cantidad);
                        psUpdate.setString(2, herramienta);
                        psUpdate.executeUpdate();
                    }

                    // c. Eliminar de la tabla utilizado
                    String sqlDelete = "DELETE FROM utilizado "
                            + "WHERE etapa_produccion_idetapa_produccion = ? "
                            + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
                    try (PreparedStatement psDelete = con.prepareStatement(sqlDelete)) {
                        psDelete.setInt(1, idEtapa);
                        psDelete.setString(2, herramienta);
                        psDelete.executeUpdate();
                    }
                }
            }

        }
    }

    private void actualizarCantidadesUsadas(Connection con, FormularioMH formMH, int idEtapa) throws SQLException {
        Map<String, String> cantidadesMateriales = formMH.getCantidadesMateriales();
        Map<String, String> cantidadesHerramientas = formMH.getCantidadesHerramientas();

        // 1. Para materiales
        for (Map.Entry<String, String> entry : cantidadesMateriales.entrySet()) {
            String nombre = entry.getKey();
            double cantidadNueva = Double.parseDouble(entry.getValue().replace(",", "."));

            // a. Obtener cantidad actual en utilizado
            String sqlSelect = "SELECT cantidad_usada FROM utilizado "
                    + "WHERE etapa_produccion_idetapa_produccion = ? "
                    + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";

            try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
                psSelect.setInt(1, idEtapa);
                psSelect.setString(2, nombre);
                ResultSet rs = psSelect.executeQuery();

                if (rs.next()) {
                    double cantidadActual = rs.getDouble("cantidad_usada");
                    double diferencia = cantidadActual - cantidadNueva;

                    // b. Ajustar inventario si la cantidad cambió
                    if (diferencia != 0) {
                        String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? "
                                + "WHERE nombre = ?";
                        try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                            psUpdate.setDouble(1, diferencia);
                            psUpdate.setString(2, nombre);
                            psUpdate.executeUpdate();
                        }
                    }
                }

                // c. Actualizar cantidad en utilizado
                String sqlUpdate = "UPDATE utilizado SET cantidad_usada = ? "
                        + "WHERE etapa_produccion_idetapa_produccion = ? "
                        + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
                try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdate)) {
                    psUpdate.setDouble(1, cantidadNueva);
                    psUpdate.setInt(2, idEtapa);
                    psUpdate.setString(3, nombre);
                    psUpdate.executeUpdate();
                }
            }
        }
        for (Map.Entry<String, String> entry : cantidadesHerramientas.entrySet()) {
            String nombre = entry.getKey();
            double cantidadNueva = Double.parseDouble(entry.getValue().replace(",", "."));

            // a. Obtener cantidad actual en utilizado
            String sqlSelect = "SELECT cantidad_usada FROM utilizado "
                    + "WHERE etapa_produccion_idetapa_produccion = ? "
                    + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";

            try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
                psSelect.setInt(1, idEtapa);
                psSelect.setString(2, nombre);
                ResultSet rs = psSelect.executeQuery();

                if (rs.next()) {
                    double cantidadActual = rs.getDouble("cantidad_usada");
                    double diferencia = cantidadActual - cantidadNueva;

                    // b. Ajustar inventario si la cantidad cambió
                    if (diferencia != 0) {
                        String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? "
                                + "WHERE nombre = ?";
                        try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                            psUpdate.setDouble(1, diferencia);
                            psUpdate.setString(2, nombre);
                            psUpdate.executeUpdate();
                        }
                    }
                }

                // c. Actualizar cantidad en utilizado
                String sqlUpdate = "UPDATE utilizado SET cantidad_usada = ? "
                        + "WHERE etapa_produccion_idetapa_produccion = ? "
                        + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
                try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdate)) {
                    psUpdate.setDouble(1, cantidadNueva);
                    psUpdate.setInt(2, idEtapa);
                    psUpdate.setString(3, nombre);
                    psUpdate.executeUpdate();
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormuEtapaProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            private Produccion produccionPanel;
            private int idProduccion;

            @Override
            public void run() {
                FormuEtapaProduccion dialog = new FormuEtapaProduccion(new javax.swing.JFrame(), true, this.idProduccion);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSComboBoxMaterial Boxestado;
    private rojeru_san.RSButtonRiple btnCancelar2;
    private rojeru_san.RSButtonRiple btnGuardar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private com.toedter.calendar.JDateChooser txtFechainicio;
    private RSMaterialComponent.RSTextFieldMaterial txtetapa;
    private com.toedter.calendar.JDateChooser txtfechafin;
    // End of variables declaration//GEN-END:variables

    public void setDatos(int idEtapa, String nombre, String cantidad, String fechaInicio, String fechaFin, String estado, String materiales, String herramientas, String asignado) {
        this.idEtapa = idEtapa;
        this.datosModificados = false; // Resetear estado de modificaciones

        try {
            // Establecer valores en los campos del formulario
            txtetapa.setText(nombre != null ? nombre : "");

            // Establecer estado
            if (estado != null && !estado.isEmpty()) {
                Boxestado.setSelectedItem(estado);
            }

            // Parsear y establecer fechas
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            if (fechaInicio != null && !fechaInicio.isEmpty() && fechaInicio.matches("\\d{4}-\\d{2}-\\d{2}")) {
                txtFechainicio.setDate(sdf.parse(fechaInicio));
            }

            if (fechaFin != null && !fechaFin.isEmpty() && fechaFin.matches("\\d{4}-\\d{2}-\\d{2}")) {
                txtfechafin.setDate(sdf.parse(fechaFin));
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar datos: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public boolean datosModificados() {
        return this.datosModificados;
    }

    private void cargarDatosEtapa(int idEtapa) {
        try (Connection con = Conexion.getConnection()) {
            // Cargar datos básicos de la etapa
            String sqlEtapa = "SELECT nombre_etapa, fecha_inicio, fecha_fin, estado, produccion_id_produccion "
                    + "FROM etapa_produccion WHERE idetapa_produccion = ?";
            try (PreparedStatement ps = con.prepareStatement(sqlEtapa)) {
                ps.setInt(1, idEtapa);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        txtetapa.setText(rs.getString("nombre_etapa"));
                        Boxestado.setSelectedItem(rs.getString("estado"));
                        txtFechainicio.setDate(rs.getDate("fecha_inicio"));
                        Date fechaFin = rs.getDate("fecha_fin");
                        if (fechaFin != null) {
                            txtfechafin.setDate(fechaFin);
                        }
                        idProduccionActual = rs.getInt("produccion_id_produccion");
                    } else {
                        throw new SQLException("No se encontró la etapa con ID: " + idEtapa);
                    }
                }
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar datos: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(EditEtapaProduccion.class.getName()).log(Level.SEVERE, null, e);
        }
    }

}
