/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package vista.Produccion;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.accessibility.Accessible;
import javax.swing.AbstractAction;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.plaf.basic.ComboPopup;
import modelo.Conexion;

/**
 *
 * @author pc
 */
public class EditEtapaProduccion extends javax.swing.JDialog {

    private int idProduccionActual;
    private int idEtapa;
    private boolean datosModificados;

    /**
     * Creates new form EtapaProduccion
     *
     * @param parent
     * @param modal
     * @param idEtapa
     * @param produccionPanel
     */
    public EditEtapaProduccion(Frame parent, boolean modal, int idEtapa) {
        super(parent, modal);
        this.idEtapa = idEtapa;

        // Configurar undecorated antes de initComponents
        setUndecorated(true);
        initComponents(); // Llamada única a initComponents

        setLocationRelativeTo(parent); // Configurar ubicación después de initComponents

        // Configuración inicial
        if (idEtapa > 0) {
            cargarDatosEtapa(idEtapa);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtetapa = new RSMaterialComponent.RSTextFieldMaterial();
        Boxestado = new RSMaterialComponent.RSComboBoxMaterial();
        txtFechainicio = new com.toedter.calendar.JDateChooser();
        txtfechafin = new com.toedter.calendar.JDateChooser();
        agregarr = new rojeru_san.RSButtonRiple();
        btnGuardar1 = new rojeru_san.RSButtonRiple();
        jLabel12 = new javax.swing.JLabel();
        PanMaterialessss = new javax.swing.JPanel();
        PanHerramientas = new javax.swing.JPanel();
        btnCancelar2 = new rojeru_san.RSButtonRiple();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(46, 49, 82));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Century751 BT", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Etapa Produccion");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 590, 50));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel6.setText("Estado:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel9.setText("Fecha final:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel10.setText("Nombre etapa:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        txtetapa.setForeground(new java.awt.Color(0, 0, 0));
        txtetapa.setColorMaterial(new java.awt.Color(0, 0, 0));
        txtetapa.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtetapa.setPhColor(new java.awt.Color(0, 0, 0));
        txtetapa.setPlaceholder("");
        txtetapa.setSelectionColor(new java.awt.Color(0, 0, 0));
        txtetapa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtetapaActionPerformed(evt);
            }
        });
        jPanel1.add(txtetapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 250, 30));

        Boxestado.setForeground(new java.awt.Color(102, 102, 102));
        Boxestado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar", "pendiente", "proceso", "completado" }));
        Boxestado.setFont(new java.awt.Font("Roboto Bold", 0, 14)); // NOI18N
        Boxestado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxestadoActionPerformed(evt);
            }
        });
        jPanel1.add(Boxestado, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 100, 260, 30));

        txtFechainicio.setBackground(new java.awt.Color(255, 255, 255));
        txtFechainicio.setForeground(new java.awt.Color(255, 255, 255));
        txtFechainicio.setDateFormatString("y-MM-d");
        txtFechainicio.setMaxSelectableDate(new java.util.Date(253370786472000L));
        jPanel1.add(txtFechainicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 180, 260, 30));

        txtfechafin.setBackground(new java.awt.Color(255, 255, 255));
        txtfechafin.setForeground(new java.awt.Color(255, 255, 255));
        txtfechafin.setDateFormatString("y-MM-d");
        jPanel1.add(txtfechafin, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, 250, 30));

        agregarr.setBackground(new java.awt.Color(46, 49, 82));
        agregarr.setText("agregar mas");
        agregarr.setFont(new java.awt.Font("Humnst777 BlkCn BT", 1, 18)); // NOI18N
        agregarr.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        agregarr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarrActionPerformed(evt);
            }
        });
        jPanel1.add(agregarr, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 140, 30));

        btnGuardar1.setBackground(new java.awt.Color(46, 49, 82));
        btnGuardar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/plus (2).png"))); // NOI18N
        btnGuardar1.setText("Guardar");
        btnGuardar1.setFont(new java.awt.Font("Humnst777 BlkCn BT", 1, 18)); // NOI18N
        btnGuardar1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnGuardar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardar1ActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 540, 140, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel12.setText("Fecha inicio:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, -1, -1));

        PanMaterialessss.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PanMaterialessssLayout = new javax.swing.GroupLayout(PanMaterialessss);
        PanMaterialessss.setLayout(PanMaterialessssLayout);
        PanMaterialessssLayout.setHorizontalGroup(
            PanMaterialessssLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        PanMaterialessssLayout.setVerticalGroup(
            PanMaterialessssLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(PanMaterialessss, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 220, 270, 300));

        PanHerramientas.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout PanHerramientasLayout = new javax.swing.GroupLayout(PanHerramientas);
        PanHerramientas.setLayout(PanHerramientasLayout);
        PanHerramientasLayout.setHorizontalGroup(
            PanHerramientasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );
        PanHerramientasLayout.setVerticalGroup(
            PanHerramientasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jPanel1.add(PanHerramientas, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 250, 300));

        btnCancelar2.setBackground(new java.awt.Color(46, 49, 82));
        btnCancelar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/salida (1).png"))); // NOI18N
        btnCancelar2.setText("Volver");
        btnCancelar2.setFont(new java.awt.Font("Humnst777 BlkCn BT", 1, 18)); // NOI18N
        btnCancelar2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnCancelar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelar2ActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 540, 140, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BoxestadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxestadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BoxestadoActionPerformed

    private void agregarrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarrActionPerformed
        this.dispose();
    }//GEN-LAST:event_agregarrActionPerformed

    private void btnGuardar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardar1ActionPerformed
        // 1. Validación de campos
        if (txtetapa.getText().trim().isEmpty()
                || txtFechainicio.getDate() == null
                || Boxestado.getSelectedIndex() <= 0) {
            new espacio_alerta((Frame) this.getParent(), true,
                    "Error", "Todos los campos son obligatorios").setVisible(true);
            return;
        }
        // 2. Mostrar diálogo de confirmación
        alertaa confirmDialog = new alertaa(
                (Frame) this.getParent(),
                true,
                "Confirmar",
                "¿Desea guardar los datos?"
        );
        confirmDialog.setVisible(true);

        if (!confirmDialog.opcionConfirmada) {
            return;
        }

        try {
            // 3. Obtener valores del formulario
            String nombreEtapa = txtetapa.getText().trim();
            Date fechaInicio = new Date(txtFechainicio.getDate().getTime());
            Date fechaFin = txtfechafin.getDate() != null
                    ? new Date(txtfechafin.getDate().getTime()) : null;
            String estado = Boxestado.getSelectedItem().toString();

            // 4. Validar fechas
            if (fechaFin != null && fechaFin.before(fechaInicio)) {
                new Error_fecha((Frame) this.getParent(), true,
                        "Error", "La fecha final no puede ser anterior a la inicial").setVisible(true);
                return;
            }

            // 5. Obtener materiales y herramientas seleccionados
            List<String> materialesSeleccionados = new ArrayList<>();
            List<String> herramientasSeleccionadas = new ArrayList<>();

            // 6. Abrir FormularioMH para editar cantidades
            FormularioMH formMH = new FormularioMH((Frame) this.getParent(), true, materialesSeleccionados, herramientasSeleccionadas);
            formMH.setVisible(true);

            if (formMH.isConfirmado()) {
                // 7. Actualizar etapa en la base de datos
                try (Connection con = Conexion.getConnection()) {
                    String sql;
                    if (idEtapa == 0) {
                        // Insertar nuevo registro
                        sql = "INSERT INTO etapa_produccion (nombre_etapa, fecha_inicio, fecha_fin, estado) "
                                + "VALUES (?, ?, ?, ?)";
                    } else {
                        // Actualizar registro existente
                        sql = "UPDATE etapa_produccion SET nombre_etapa = ?, fecha_inicio = ?, "
                                + "fecha_fin = ?, estado = ? WHERE idetapa_produccion = ?";
                    }
                    manejarEliminaciones(con, formMH, idEtapa);

                    try (PreparedStatement ps = con.prepareStatement(sql)) {
                        ps.setString(1, nombreEtapa);
                        ps.setDate(2, fechaInicio);
                        ps.setDate(3, fechaFin);
                        ps.setString(4, estado);

                        if (idEtapa > 0) {
                            ps.setInt(5, idEtapa);
                        }

                        int affectedRows = ps.executeUpdate();
                        if (affectedRows > 0) {
                            this.datosModificados = true;
                            // 8. Actualizar cantidades de materiales y herramientas en la tabla utilizado
                            Map<String, String> cantidadesMateriales = formMH.getCantidadesMateriales();
                            Map<String, String> cantidadesHerramientas = formMH.getCantidadesHerramientas();

                            // Actualizar o insertar en la tabla utilizado
                            String updateUtilizado = "INSERT INTO utilizado (etapa_produccion_idetapa_produccion, inventario_id_inventario, cantidad_usada) "
                                    + "VALUES (?, (SELECT id_inventario FROM inventario WHERE nombre = ?), ?) "
                                    + "ON DUPLICATE KEY UPDATE cantidad_usada = ?";
                            try (PreparedStatement psUtilizado = con.prepareStatement(updateUtilizado)) {
                                if (idEtapa > 0) {
                                    for (Map.Entry<String, String> entry : cantidadesMateriales.entrySet()) {
                                        psUtilizado.setInt(1, idEtapa);
                                        psUtilizado.setString(2, entry.getKey());
                                        psUtilizado.setDouble(3, Double.parseDouble(entry.getValue().replace(",", ".")));
                                        psUtilizado.setDouble(4, Double.parseDouble(entry.getValue().replace(",", ".")));
                                        psUtilizado.executeUpdate();
                                    }
                                    for (Map.Entry<String, String> entry : cantidadesHerramientas.entrySet()) {
                                        psUtilizado.setInt(1, idEtapa);
                                        psUtilizado.setString(2, entry.getKey());
                                        psUtilizado.setDouble(3, Double.parseDouble(entry.getValue().replace(",", ".")));
                                        psUtilizado.setDouble(4, Double.parseDouble(entry.getValue().replace(",", ".")));
                                        psUtilizado.executeUpdate();
                                    }
                                }
                            }

                            this.dispose();
                        }
                    }
                }
            }
        } catch (SQLException e) {
            new Error_guardar((Frame) this.getParent(), true,
                    "Error", "Error al guardar: " + e.getMessage()).setVisible(true);
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnGuardar1ActionPerformed

    private void txtetapaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtetapaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtetapaActionPerformed

    private void btnCancelar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelar2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCancelar2ActionPerformed
    private void manejarEliminaciones(Connection con, FormularioMH formMH, int idEtapa) throws SQLException {
        // 1. Para materiales a eliminar
        for (String material : formMH.getMaterialesAEliminar()) {
            // a. Obtener cantidad usada actual
            String sqlSelect = "SELECT cantidad_usada FROM utilizado "
                    + "WHERE etapa_produccion_idetapa_produccion = ? "
                    + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";

            try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
                psSelect.setInt(1, idEtapa);
                psSelect.setString(2, material);
                ResultSet rs = psSelect.executeQuery();

                if (rs.next()) {
                    double cantidad = rs.getDouble("cantidad_usada");

                    // b. Devolver al inventario
                    String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? "
                            + "WHERE nombre = ?";
                    try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                        psUpdate.setDouble(1, cantidad);
                        psUpdate.setString(2, material);
                        psUpdate.executeUpdate();
                    }

                    // c. Eliminar de la tabla utilizado
                    String sqlDelete = "DELETE FROM utilizado "
                            + "WHERE etapa_produccion_idetapa_produccion = ? "
                            + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
                    try (PreparedStatement psDelete = con.prepareStatement(sqlDelete)) {
                        psDelete.setInt(1, idEtapa);
                        psDelete.setString(2, material);
                        psDelete.executeUpdate();
                    }
                }
            }
        }

        // 2. Hacer lo mismo para herramientas
        for (String herramienta : formMH.getHerramientasAEliminar()) {
            // Misma lógica que para materiales
            // a. Obtener cantidad usada actual
            String sqlSelect = "SELECT cantidad_usada FROM utilizado "
                    + "WHERE etapa_produccion_idetapa_produccion = ? "
                    + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";

            try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
                psSelect.setInt(1, idEtapa);
                psSelect.setString(2, herramienta);
                ResultSet rs = psSelect.executeQuery();

                if (rs.next()) {
                    double cantidad = rs.getDouble("cantidad_usada");

                    // b. Devolver al inventario
                    String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? "
                            + "WHERE nombre = ?";
                    try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                        psUpdate.setDouble(1, cantidad);
                        psUpdate.setString(2, herramienta);
                        psUpdate.executeUpdate();
                    }

                    // c. Eliminar de la tabla utilizado
                    String sqlDelete = "DELETE FROM utilizado "
                            + "WHERE etapa_produccion_idetapa_produccion = ? "
                            + "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
                    try (PreparedStatement psDelete = con.prepareStatement(sqlDelete)) {
                        psDelete.setInt(1, idEtapa);
                        psDelete.setString(2, herramienta);
                        psDelete.executeUpdate();
                    }
                }
            }

        }
    }
private void actualizarCantidadesUsadas(Connection con, FormularioMH formMH, int idEtapa) throws SQLException {
    Map<String, String> cantidadesMateriales = formMH.getCantidadesMateriales();
    Map<String, String> cantidadesHerramientas = formMH.getCantidadesHerramientas();
    
    // 1. Para materiales
    for (Map.Entry<String, String> entry : cantidadesMateriales.entrySet()) {
        String nombre = entry.getKey();
        double cantidadNueva = Double.parseDouble(entry.getValue().replace(",", "."));
        
        // a. Obtener cantidad actual en utilizado
        String sqlSelect = "SELECT cantidad_usada FROM utilizado " +
                          "WHERE etapa_produccion_idetapa_produccion = ? " +
                          "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
        
        try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
            psSelect.setInt(1, idEtapa);
            psSelect.setString(2, nombre);
            ResultSet rs = psSelect.executeQuery();
            
            if (rs.next()) {
                double cantidadActual = rs.getDouble("cantidad_usada");
                double diferencia = cantidadActual - cantidadNueva;
                
                // b. Ajustar inventario si la cantidad cambió
                if (diferencia != 0) {
                    String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? " +
                                               "WHERE nombre = ?";
                    try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                        psUpdate.setDouble(1, diferencia);
                        psUpdate.setString(2, nombre);
                        psUpdate.executeUpdate();
                    }
                }
            }
            
            // c. Actualizar cantidad en utilizado
            String sqlUpdate = "UPDATE utilizado SET cantidad_usada = ? " +
                             "WHERE etapa_produccion_idetapa_produccion = ? " +
                             "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
            try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdate)) {
                psUpdate.setDouble(1, cantidadNueva);
                psUpdate.setInt(2, idEtapa);
                psUpdate.setString(3, nombre);
                psUpdate.executeUpdate();
            }
        }}
    for (Map.Entry<String, String> entry : cantidadesHerramientas.entrySet()) {
        String nombre = entry.getKey();
        double cantidadNueva = Double.parseDouble(entry.getValue().replace(",", "."));
        
        // a. Obtener cantidad actual en utilizado
        String sqlSelect = "SELECT cantidad_usada FROM utilizado " +
                          "WHERE etapa_produccion_idetapa_produccion = ? " +
                          "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
        
        try (PreparedStatement psSelect = con.prepareStatement(sqlSelect)) {
            psSelect.setInt(1, idEtapa);
            psSelect.setString(2, nombre);
            ResultSet rs = psSelect.executeQuery();
            
            if (rs.next()) {
                double cantidadActual = rs.getDouble("cantidad_usada");
                double diferencia = cantidadActual - cantidadNueva;
                
                // b. Ajustar inventario si la cantidad cambió
                if (diferencia != 0) {
                    String sqlUpdateInventario = "UPDATE inventario SET cantidad = cantidad + ? " +
                                               "WHERE nombre = ?";
                    try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdateInventario)) {
                        psUpdate.setDouble(1, diferencia);
                        psUpdate.setString(2, nombre);
                        psUpdate.executeUpdate();
                    }
                }
            }
            
            // c. Actualizar cantidad en utilizado
            String sqlUpdate = "UPDATE utilizado SET cantidad_usada = ? " +
                             "WHERE etapa_produccion_idetapa_produccion = ? " +
                             "AND inventario_id_inventario = (SELECT id_inventario FROM inventario WHERE nombre = ?)";
            try (PreparedStatement psUpdate = con.prepareStatement(sqlUpdate)) {
                psUpdate.setDouble(1, cantidadNueva);
                psUpdate.setInt(2, idEtapa);
                psUpdate.setString(3, nombre);
                psUpdate.executeUpdate();
            }
        }}
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormuEtapaProduccion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            private Produccion produccionPanel;
            private int idProduccion;

            @Override
            public void run() {
                FormuEtapaProduccion dialog = new FormuEtapaProduccion(new javax.swing.JFrame(), true, this.idProduccion);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private RSMaterialComponent.RSComboBoxMaterial Boxestado;
    private javax.swing.JPanel PanHerramientas;
    private javax.swing.JPanel PanMaterialessss;
    private rojeru_san.RSButtonRiple agregarr;
    private rojeru_san.RSButtonRiple btnCancelar2;
    private rojeru_san.RSButtonRiple btnGuardar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private com.toedter.calendar.JDateChooser txtFechainicio;
    private RSMaterialComponent.RSTextFieldMaterial txtetapa;
    private com.toedter.calendar.JDateChooser txtfechafin;
    // End of variables declaration//GEN-END:variables

    public void setDatos(int idEtapa, String nombre, String cantidad, String fechaInicio, String fechaFin, String estado, String materiales, String herramientas, String asignado) {
        this.idEtapa = idEtapa;
        this.datosModificados = false; // Resetear estado de modificaciones

        try {
            // Establecer valores en los campos del formulario
            txtetapa.setText(nombre != null ? nombre : "");

            // Establecer estado
            if (estado != null && !estado.isEmpty()) {
                Boxestado.setSelectedItem(estado);
            }

            // Parsear y establecer fechas
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

            if (fechaInicio != null && !fechaInicio.isEmpty() && fechaInicio.matches("\\d{4}-\\d{2}-\\d{2}")) {
                txtFechainicio.setDate(sdf.parse(fechaInicio));
            }

            if (fechaFin != null && !fechaFin.isEmpty() && fechaFin.matches("\\d{4}-\\d{2}-\\d{2}")) {
                txtfechafin.setDate(sdf.parse(fechaFin));
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar datos: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public boolean datosModificados() {
        return this.datosModificados;
    }

    private void cargarDatosEtapa(int idEtapa) {
        try (Connection con = Conexion.getConnection()) {
            // Cargar datos básicos de la etapa
            String sqlEtapa = "SELECT nombre_etapa, fecha_inicio, fecha_fin, estado, produccion_id_produccion "
                    + "FROM etapa_produccion WHERE idetapa_produccion = ?";
            try (PreparedStatement ps = con.prepareStatement(sqlEtapa)) {
                ps.setInt(1, idEtapa);
                try (ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        txtetapa.setText(rs.getString("nombre_etapa"));
                        Boxestado.setSelectedItem(rs.getString("estado"));
                        txtFechainicio.setDate(rs.getDate("fecha_inicio"));
                        Date fechaFin = rs.getDate("fecha_fin");
                        if (fechaFin != null) {
                            txtfechafin.setDate(fechaFin);
                        }
                        idProduccionActual = rs.getInt("produccion_id_produccion");
                    } else {
                        throw new SQLException("No se encontró la etapa con ID: " + idEtapa);
                    }
                }
            }

            // Cargar materiales y herramientas usados
            cargarMaterialesHerramientasUsados(con, idEtapa);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar datos: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(EditEtapaProduccion.class.getName()).log(Level.SEVERE, null, e);
        }
    }

    private void cargarMaterialesHerramientasUsados(Connection con, int idEtapa) throws SQLException {
        // Crear mapas para almacenar materiales y herramientas
        Map<String, String> materiales = new HashMap<>();
        Map<String, String> herramientas = new HashMap<>();

        // Consultar los materiales y herramientas usados
        String sql = "SELECT i.nombre, i.tipo, u.cantidad_usada "
                + "FROM utilizado u "
                + "JOIN inventario i ON u.inventario_id_inventario = i.id_inventario "
                + "WHERE u.etapa_produccion_idetapa_produccion = ?";
        try (PreparedStatement ps = con.prepareStatement(sql)) {
            ps.setInt(1, idEtapa);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    String nombre = rs.getString("nombre");
                    String tipo = rs.getString("tipo");
                    String cantidadUsada = String.valueOf(rs.getDouble("cantidad_usada"));

                    // Clasificar según el tipo (material o herramienta)
                    if ("material".equalsIgnoreCase(tipo)) {
                        materiales.put(nombre, cantidadUsada);
                    } else if ("herramienta".equalsIgnoreCase(tipo)) {
                        herramientas.put(nombre, cantidadUsada);
                    }
                }
            }
        }

        // Configurar los paneles con los mapas de materiales y herramientas
        configurarPaneles(materiales, herramientas);
    }

    private void configurarPaneles(Map<String, String> materiales, Map<String, String> herramientas) {
        // Configurar panel de materiales
        PanMaterialessss.setLayout(new BoxLayout(PanMaterialessss, BoxLayout.Y_AXIS));
        PanMaterialessss.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.GRAY),
                "Materiales",
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION,
                new Font("Segoe UI", Font.BOLD, 18) // Tamaño 14 y negrita
        ));
        PanMaterialessss.setBackground(Color.WHITE);
        PanMaterialessss.setPreferredSize(new java.awt.Dimension(350, 200)); // Ancho: 350px, Alto: 200px

        for (Map.Entry<String, String> entry : materiales.entrySet()) {
            JPanel fila = new JPanel(new FlowLayout(FlowLayout.LEFT));
            fila.setBackground(Color.WHITE);

            JLabel lblNombre = new JLabel(entry.getKey() + ": ");
            lblNombre.setFont(new Font("Segoe UI", Font.BOLD, 16));

            JLabel lblCantidad = new JLabel(entry.getValue());
            lblCantidad.setFont(new Font("Segoe UI", Font.PLAIN, 16));

            fila.add(lblNombre);
            fila.add(lblCantidad);
            PanMaterialessss.add(fila);
        }

        // Configurar panel de herramientas
        PanHerramientas.setLayout(new BoxLayout(PanHerramientas, BoxLayout.Y_AXIS));
        PanHerramientas.setBorder(BorderFactory.createTitledBorder(
                BorderFactory.createLineBorder(Color.GRAY),
                "Herramientas",
                javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
                javax.swing.border.TitledBorder.DEFAULT_POSITION,
                new Font("Segoe UI", Font.BOLD, 18) // Tamaño 14 y negrita
        ));
        PanHerramientas.setBackground(Color.WHITE);
        PanHerramientas.setPreferredSize(new java.awt.Dimension(350, 200)); // Ancho: 350px, Alto: 200px

        for (Map.Entry<String, String> entry : herramientas.entrySet()) {
            JPanel fila = new JPanel(new FlowLayout(FlowLayout.LEFT));
            fila.setBackground(Color.WHITE);

            JLabel lblNombre = new JLabel(entry.getKey() + ": ");
            lblNombre.setFont(new Font("Segoe UI", Font.BOLD, 16));

            JLabel lblCantidad = new JLabel(entry.getValue());
            lblCantidad.setFont(new Font("Segoe UI", Font.PLAIN, 16));

            fila.add(lblNombre);
            fila.add(lblCantidad);
            PanHerramientas.add(fila);
        }

        // Ajustar tamaño del diálogo
        pack();
    }
}
